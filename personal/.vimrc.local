"Mapping table
"Ctrl+Tab    : Switch buffers
"<Leader>bg  : Close current buffer
"<Leader>bod : Close all other buffers
"<F7>        : Toggle spell
"<F5>        : Search filename without extension
"<F6>        : Search files word under cursor or selected content
"<Leader>cf  : Search keyword in files
if has('win32') && has('directx') && has('gui')
    set rop=type:directx,gamma:1.0,contrast:0.5,level:1,geom:1,renmode:4,taamode:1
endif
set nospell
nmap <C-TAB>     : bn <CR>
nmap <Leader>bd  : Bclose <CR>
nmap <Leader>bod : call MyCloseOtherBuffers() <CR>
set fileencodings=ucs-bom,utf-8,latin1
silent map <F7> :setlocal spell!<CR>

let g:airline#extensions#bufferline#enabled = 0
color desert
autocmd Filetype c nested set nolist
autocmd Filetype cpp nested set nolist
set tags=tags

set wildignore+=*\\tmp\\*,*.swp,*.zip,*.exe,*.o,.git  " Windows


"NERDTree Optoins
let NERDTreeRespectWildIgnore = 1
let NERDTreeQuitOnOpen = 0
let g:signify_vcs_list = ['git']

if isdirectory(expand("~/.vim/bundle/ctrlp.vim/"))
    let g:ctrlp_by_filename = 1
    let g:ctrlp_use_caching = 1
    let g:ctrlp_lazy_update = 0
    let g:ctrlp_max_files = 1000000
    let g:ctrlp_max_depth = 100
    let g:ctrlp_working_path_mode = 'ra'
    noremap <F5> : call SearchCtrlpContent( expand('%:t:r'))<CR>
    nmap <F6> <C-P><C-\>w
    vmap <F6> "ay:CtrlP<CR><C-\>ra
    if isdirectory(expand("~/.vim/bundle/ctrlp-py-matcher/"))
        let g:ctrlp_match_func = { 'match': 'pymatcher#PyMatch' }
    endif
endif
fun! MyCloseOtherBuffers()   
    let curbuf = bufname(bufnr(""))
    if buflisted(curbuf) == 0
        return
    endif

    let c = 1
    while c <= bufnr("$")
        let itername = bufname(c)
        if buflisted(itername) && itername != curbuf
            execute ':Bclose '.c
        endif
		let c = c + 1
    endwhile
endfunction

fun! SearchCtrlpContent(content)
    let @a=a:content
    execute "normal \<C-p>\<C-\>ra"
endfun

if executable('ag')
    noremap <Leader>cf :Ack <cword><CR>
    vnoremap <Leader>cf y:Ack <C-r>=fnameescape(@")<CR><CR>
endif
